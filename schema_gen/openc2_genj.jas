-- Generated from schema\openc2.jaen, Thu Mar 16 16:55:44 2017

/*
module:        openc2
title:         OpenC2 Command Definitions
version:       0.3
description:   Datatypes that define the content of OpenC2 commands.  These
               types are used with an Encoder/Decoder (codec) to serialize and
               deserialize commands for transmission in a format such as JSON,
               XML, or CBOR, or to generate format-specific message schemas.
               This version includes an embedded target data model, pending
               development of the import mechanism.
namespace:     http://openc2.org/openc2
root:          OpenC2Object
import:        1, target, http://openc2.org/target
*/

OpenC2Object ::= CHOICE {
    command      [1] OpenC2Command,
    response     [2] OpenC2Response,
    alert        [3] OpenC2Alert
}

OpenC2Command ::= RECORD {
    action       Action,
    target       Target,
    actuator     Actuator OPTIONAL,
    modifiers    Modifiers OPTIONAL
}

OpenC2Response ::= RECORD {
    source       DeviceID,    -- ID of the command issuer, from "command-src" modifier
    cmdref       CommandID,    -- Command unique identifier, from "command-ref" modifier
    status       StatusCode,    -- Adapted from HTTP Status Codes, RFC 7231
    statusText   STRING,    -- Status description
    results      STRING     -- Results of executing the command
}

OpenC2Alert ::= RECORD {
    message      STRING
}

Action ::= ENUMERATED {
    scan         (1),
    locate       (2),
    query        (3),
    report       (4),
    notify       (5),
    deny         (6),
    contain      (7),
    allow        (8),
    start        (9),
    stop         (10),
    restart      (11),
    pause        (12),
    resume       (13),
    cancel       (14),
    set          (15),
    update       (16),
    move         (17),
    redirect     (18),
    delete       (19),
    snapshot     (20),
    detonate     (21),
    restore      (22),
    save         (23),
    throttle     (24),
    delay        (25),
    substitute   (26),
    copy         (27),
    sync         (28),
    distill      (29),
    augment      (30),
    investigate  (31),
    mitigate     (32),
    remediate    (33)
}

Target ::= CHOICE {    -- OpenC2 Target datatypes
    artifact              [1] artifact,    -- SCO v2
    commands              [2] commands,    -- OpenC2 - query actuator for supported capabilities
    device                [3] device,    -- CybOX 2.1
    directory             [4] directory,    -- SCO v2
    disk                  [5] disk,    -- CybOX 2.1
    disk_partition        [6] disk-partition,    -- CybOX 2.1
    domain_name           [7] domain-name,    -- SCO v2
    email_addr            [8] email-addr,    -- SCO v2
    email_message         [9] email-message,    -- SCO v2
    file                  [10] file,    -- SCO v2
    ipv4_addr             [11] ipv4-addr,    -- SCO v2
    ipv6_addr             [12] ipv6-addr,    -- SCO v2
    mac_addr              [13] mac-addr,    -- SCO v2
    memory                [14] memory,    -- CybOX 2.1
    ip_connection         [15] ip-connection,    -- OpenC2
    process               [16] process,    -- SCO v2
    software              [17] software,    -- SCO v2
    url                   [18] url,    -- SCO v2
    user_account          [19] user-account,    -- SCO v2
    user_session          [20] user-session,    -- CybOX 2.1
    volume                [21] volume,    -- CybOX 2.1
    windows_registry_key  [22] windows-registry-key,    -- SCO v2
    x509_certificate      [23] x509-certificate     -- SCO v2
}

Actuator ::= CHOICE {
    endpoint                         [1] ActuatorSpecifiers,
    endpoint_digital_telephone_handset [2] ActuatorSpecifiers,
    endpoint_laptop                  [3] ActuatorSpecifiers,
    endpoint_pos_terminal            [4] ActuatorSpecifiers,
    endpoint_printer                 [5] ActuatorSpecifiers,
    endpoint_sensor                  [6] ActuatorSpecifiers,
    endpoint_server                  [7] ActuatorSpecifiers,
    endpoint_smart_meter             [8] ActuatorSpecifiers,
    endpoint_smart_phone             [9] ActuatorSpecifiers,
    endpoint_tablet                  [10] ActuatorSpecifiers,
    endpoint_workstation             [11] ActuatorSpecifiers,
    network                          [12] ActuatorSpecifiers,
    network_bridge                   [13] ActuatorSpecifiers,
    network_firewall                 [14] ActuatorSpecifiers,
    network_gateway                  [15] ActuatorSpecifiers,
    network_guard                    [16] ActuatorSpecifiers,
    network_hips                     [17] ActuatorSpecifiers,
    network_hub                      [18] ActuatorSpecifiers,
    network_ids                      [19] ActuatorSpecifiers,
    network_ips                      [20] ActuatorSpecifiers,
    network_modem                    [21] ActuatorSpecifiers,
    network_nic                      [22] ActuatorSpecifiers,
    network_proxy                    [23] ActuatorSpecifiers,
    network_router                   [24] ActuatorSpecifiers,
    network_security_manager         [25] ActuatorSpecifiers,
    network_sense_making             [26] ActuatorSpecifiers,
    network_sensor                   [27] ActuatorSpecifiers,
    network_switch                   [28] ActuatorSpecifiers,
    network_vpn                      [29] ActuatorSpecifiers,
    network_wap                      [30] ActuatorSpecifiers,
    process                          [31] ActuatorSpecifiers,
    process_aaa_server               [32] ActuatorSpecifiers,
    process_anti_virus_scanner       [33] ActuatorSpecifiers,
    process_connection_scanner       [34] ActuatorSpecifiers,
    process_directory_server         [35] ActuatorSpecifiers,
    process_dns_server               [36] ActuatorSpecifiers,
    process_email_service            [37] ActuatorSpecifiers,
    process_file_scanner             [38] ActuatorSpecifiers,
    process_location_service         [39] ActuatorSpecifiers,
    process_network_scanner          [40] ActuatorSpecifiers,
    process_remediation_service      [41] ActuatorSpecifiers,
    process_reputation_service       [42] ActuatorSpecifiers,
    process_sandbox                  [43] ActuatorSpecifiers,
    process_virtualization_service   [44] ActuatorSpecifiers,
    process_vulnerability_scanner    [45] ActuatorSpecifiers
}

ActuatorSpecifiers ::= RECORD {
    port         STRING OPTIONAL,
    asset_id     STRING OPTIONAL
}

Modifiers ::= MAP {
    context      [1] STRING OPTIONAL,
    datetime     [2] DateTime OPTIONAL,
    delay        [3] Duration OPTIONAL,
    duration     [4] Duration OPTIONAL,
    frequency    [5] Duration OPTIONAL,
    command_ref  [6] CommandID OPTIONAL,
    response     [7] ResponseValue OPTIONAL,
    method       [8] MethodValue OPTIONAL,
    options      [9] STRING OPTIONAL,
    search       [10] SearchValue OPTIONAL,
    where        [11] WhereValue OPTIONAL,
    command_src  [12] DeviceID OPTIONAL
}

Duration ::= STRING(PATTERN "^PT(\d+H(\d+M(\d+S)?)?|\d+M(\d+S)?|\d+S)$")

DateTime ::= STRING(PATTERN "^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d{1,6})?(Z|[-+]\d\d:\d\d)$")    -- RFC 3339 format date and time

ResponseValue ::= ENUMERATED {
    ack          (1),
    status       (2)
}

MethodValue ::= CHOICE {    -- Method must agree with Action (test descriptions)
    deny         [1] DenyMethod,    -- Action must be "deny"
    pause        [2] PauseMethod,    -- Action must be 'pause'
    scan         [3] ScanMethod,    -- Action must be 'scan"
    start        [4] StartMethod,    -- Action must be start
    stop         [5] StopMethod     -- Action must be "stop"
}

DenyMethod ::= ENUMERATED {
    acl          (1),
    blackhole    (2),
    sinkhole     (3),
    blacklist    (4),
    whitelist    (5)
}

PauseMethod ::= ENUMERATED {
    hibernate    (1),
    sleep        (2),
    suspend      (3)
}

ScanMethod ::= ENUMERATED {
    authenticated      (1),
    non-authenticated  (2)
}

StartMethod ::= ENUMERATED {
    spawn        (1)
}

StopMethod ::= ENUMERATED {
    graceful     (1),
    immediate    (2)
}

WhereValue ::= ENUMERATED {
    internal     (1),
    perimeter    (2)
}

SearchValue ::= ENUMERATED {
    cve              (1),
    patch            (2),
    vendor-bulletin  (3),
    signature        (4)
}

DeviceID ::= STRING    -- Device Identifier of the command issuer

CommandID ::= STRING    -- Command unique identifier

StatusCode ::= ENUMERATED {    -- Adapted from HTTP Status Codes, RFC 7231
    Processing             (102),    -- 1xx: Informational
    OK                     (200),    -- 2xx: Success
    Bad_Request            (400),    -- 3xx: Redirection
    Unauthorized           (401),    -- 4xx: Client Error
    Forbidden              (403),
    Internal_Server_Error  (500),    -- 5xx: Server Error
    Not_Implemented        (501)
}

Base64 ::= STRING    -- A sequence of octets encoded as a Base64 string

Hex ::= STRING    -- A sequence of octets encoded as a hexadecimal string

hashes-type ::= MAP {
    MD5          [1] Hex,    -- MD5 message digest as defined in RFC3121
    MD6          [2] Hex,    -- MD6 message digest as defined in MD6 proposal
    RIPEMD-160   [3] Hex,    -- RACE Integrity Primitives Evaluation Message as defined in RIPEMD-160 specification
    SHA-1        [4] Hex,    -- Secure Hash Algorithm (SHA)-1 as defined in RFC3174
    SHA-224      [5] Hex,    -- SHA-224 as defined in RFC6234 (US Secure Hash Algorithms)
    SHA-256      [6] Hex,    -- SHA-256 as defined in RFC6234
    SHA-384      [7] Hex,    -- SHA-384 as defined in RFC6234
    SHA-512      [8] Hex,    -- SHA-512 as defined in RFC6234
    SHA3-224     [9] Hex,    -- SHA3-224 as defined in FIPS PUP 202
    SHA3-256     [10] Hex,    -- SHA3-256 as defined in FIPS PUP 202
    SHA3-384     [11] Hex,    -- SHA3-384 as defined in FIPS PUP 202
    SHA3-512     [12] Hex,    -- SHA3-512 as defined in FIPS PUP 202
    ssdeep       [13] Hex,    -- ssdeep fuzzy hashing algorithm as defined in the SSDEEP specification
    WHIRLPOOL    [14] Hex     -- whirlpool cryptographic hash function as defined in ISO/IEC 10118-3:2004
}

artifact ::= RECORD {
    type         STRING,    -- MUST be "artifact"
    mime_type    STRING OPTIONAL,    -- MUST be a valid MIME type as specified in the IANA Media Types registry
    *            payload OPTIONAL,    -- choice of literal content or URL to obtain content
    hashes       hashes-type OPTIONAL     -- Specifies a dictionary of hashes for the contents of the payload
}

payload ::= CHOICE {
    payload_bin  [1] Base64,    -- Specifies the binary data contained in the artifact as a base64-encoded string.
    url          [2] STRING     -- MUST be a valid URL that resolves to the un-encoded content
}

autonomous-system ::= RECORD {
    number       INTEGER,    -- Number assigned to the AS, typically by a Regional Internet Registry
    name         STRING OPTIONAL,    -- Name of the AS
    rir          STRING OPTIONAL     -- Regional Internet Registry (RIR) that assigned the number to the AS
}

commands ::= ENUMERATED {    -- Target used to query Actuator for its supported capabilities
    actions      (1),    -- results = JSON array of supported action verbs
    schema       (2),    -- results = JAEN syntax of supported commands
    actuators    (3)     -- results = JSON array of actuator group names
}

device ::= MAP {
    description       [1] STRING OPTIONAL,
    device_type       [2] STRING OPTIONAL,
    manufacturer      [3] STRING OPTIONAL,
    model             [4] STRING OPTIONAL,
    serial_number     [5] STRING OPTIONAL,
    firmware_version  [6] STRING OPTIONAL,
    system_details    [7] STRING OPTIONAL
}

directory ::= MAP {
    path         [1] STRING,    -- Path, as originally observed, to the directory on the filesystem
    path_enc     [2] STRING OPTIONAL,    -- Observed encoding for the path, from the IANA Character Set Registry
    created      [3] DateTime OPTIONAL,    -- Date/time the directory was created
    modified     [4] DateTime OPTIONAL,    -- Date/time the directory was last written-to/modified
    accessed     [5] DateTime OPTIONAL,    -- Date/time the directory was last accessed
    contains     [6] dir-contents OPTIONAL     -- List of files/directories contained within the directory
}

dir-contents ::= ARRAY_OF {
                 [0] dirfile
}

dirfile ::= CHOICE {
    d            [1] directory,
    f            [2] file
}

domain-name ::= RECORD {
    value        STRING,    -- Value of the domain name
    resolves_to  ip-addrs OPTIONAL     -- List of IP addresses or domain names
}

ip-addrs ::= ARRAY_OF {    -- List of IP addresses or domain names
                 [0] ip-addr
}

ip-addr ::= CHOICE {
    ipv4         [1] ipv4-addr,
    ipv6         [2] ipv6-addr,
    name         [3] domain-name
}

email-addr ::= RECORD {
    value         STRING,    -- Email address (addr-spec in RFC 5322 Section 3.4)
    display_name  STRING OPTIONAL,    -- Name that is displayed to the user of a mail application
    belongs_to    user-account OPTIONAL     -- User account that the email address belongs to
}

email-message ::= RECORD {    -- TODO: finish
}

file ::= RECORD {    -- TODO: finish
}

ipv4-addr ::= RECORD {
    value             STRING,    -- IPv4 address or range in CIDR notation
    resolves_to_refs  mac-addrs OPTIONAL,    -- Specifies a list of references to one or more Layer 2 Media Access Control (MAC) addresses that the IPv4 address resolves to.
    belongs_to_refs   asystems OPTIONAL     -- Specifies a reference to one or more autonomous systems (AS) that the IPv4 address belongs to.
}

ipv6-addr ::= RECORD {
    value             STRING,    -- IPv6 address or range
    resolves_to_refs  mac-addrs OPTIONAL,    -- Specifies a list of references to one or more Layer 2 Media Access Control (MAC) addresses that the IPv4 address resolves to.
    belongs_to_refs   asystems OPTIONAL     -- Specifies a reference to one or more autonomous systems (AS) that the IPv4 address belongs to.
}

mac-addrs ::= ARRAY_OF {
                 [0] mac-addr
}

mac-addr ::= STRING    -- Colon-delimited MAC-48 address with leading zeros for each octet

asystems ::= ARRAY_OF {
                 [0] autonomous-system
}

ip-connection ::= RECORD {    -- 5-tuple that specifies a tcp/ip connection
    src_addr         ip-addr OPTIONAL,    -- source address
    src_port         port OPTIONAL,    -- source TCP/UDP port number
    dst_addr         ip-addr OPTIONAL,    -- destination address
    dst_port         port OPTIONAL,    -- destination TCP/UDP port number
    layer3_protocol  layer3-protocol OPTIONAL,    -- IEEE 802 Ether Type
    layer4_protocol  layer4-protocol OPTIONAL     -- Protocol (IPv4) / Next Header (IPv6)
}

port ::= CHOICE {    -- TCP/UDP port number or protocol
    number       [1] INTEGER,    -- Port number (e.g., dynamically assigned)
    protocol     [2] layer7-protocol     -- Registered port nummber (registered with IANA)
}

layer3-protocol ::= ENUMERATED {    -- IEEE 802 Ether Types - any IANA value, RFC 7042
    IPv4         (2048),    -- 0x0800 Internet Protocol Version 4
    ARP          (2054),    -- 0x0806 Address Resolution Protocol
    IPv6         (34525),    -- 0x86DD Internet Protocol Version 6
    MPLS         (34887)     -- 0x8847 Multi-Protocol Label Switching
}

layer4-protocol ::= ENUMERATED {    -- protocol (IPv4) or next header (IPv6) field - any IANA value, RFC 5237
    ICMP         (1),    -- Internet Control Message Protocol - RFC 792
    TCP          (6),    -- Transmission Control Protocol - RFC 793
    UDP          (17)     -- User Datagram Protocol - RFC 768
}

layer7-protocol ::= ENUMERATED {    -- Service Name and Transport Protocol Port - any IANA value, RFC 6335
    ftp-data     (20),    -- File Transfer Protocol (data)
    ftp          (21),    -- File Transfer Protocol (control)
    ssh          (22),    -- Secure Shell Protocol
    telnet       (23),    -- Telnet
    smtp         (25),    -- Simple Mail Transfer Protocol
    http         (80),    -- Hypertext Transport Protocol
    https        (443)     -- HTTP over TLS
}

process ::= RECORD {
}

software ::= RECORD {
    name         STRING,    -- Name of the software
    cpe          STRING OPTIONAL,    -- From Common Platform Enumeration (CPE) v2.3 dictionary
    language     STRING OPTIONAL,    -- Language of the software from ISO 639-2
    vendor       STRING OPTIONAL,    -- Vendor of the software
    version      STRING OPTIONAL     -- Version of the software
}

url ::= STRING    -- Uniform Resource Locator

user-account ::= MAP {
    user_id                [1] STRING,    -- Identifier of the account.  Format depends on the system the account is maintained in.
    account_login          [2] STRING OPTIONAL,    -- Account login string, in cases where user_id is other than what the user types to log in.
    account_type           [3] STRING OPTIONAL,    -- Value from the account-type vocabulary
    display_name           [4] STRING OPTIONAL,    -- Display name of the account (e.g., Unix GECOS field)
    is_service_account     [5] BOOLEAN OPTIONAL,    -- Account is associated with a network service or system process, not an individual.
    is_privileged          [6] BOOLEAN OPTIONAL,    -- Account has elevated privileges
    can_escalate_privs     [7] BOOLEAN OPTIONAL,    -- Account has the ability to escalate privileges
    is_disabled            [8] BOOLEAN OPTIONAL,    -- Account is disabled
    account_created        [9] DateTime OPTIONAL,    -- Creation date of the account
    account_expires        [10] DateTime OPTIONAL,    -- Expiration date of the account
    password_last_changed  [11] DateTime OPTIONAL,    -- When the account password was last changed
    account_first_login    [12] DateTime OPTIONAL,    -- When the account was first accessed
    account_last_login     [13] DateTime OPTIONAL     -- When the account was last accessed
}

account-type ::= ENUMERATED {
    unix            (1),    -- POSIX account
    windows-local   (2),    -- Windows local account
    windows-domain  (3),    -- Windows domain account
    ldap            (4),    -- Lightweight Directory Access Protocol (LDAP) account
    tacacs          (5),    -- Terminal Access Controller Access Control System (TACACS) account
    radius          (6),    -- Remote Authentication Dial-in User Service (RADIUS - RFC 2865) account
    nis             (7),    -- Network Information System (NIS) account
    openid          (8),    -- OpenID account
    facebook        (9),    -- Facebook account
    skype           (10),    -- Skype account
    twitter         (11)     -- Twitter account
}

windows-registry-key ::= RECORD {
}

x509-certificate ::= RECORD {
}
