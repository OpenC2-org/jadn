-- Generated from schema\openc2.jaen, Tue Apr 11 09:47:03 2017

/*
module:        openc2
title:         OpenC2 Command Definitions
version:       0.3
description:   Datatypes that define the content of OpenC2 commands.  These
               types are used with an Encoder/Decoder (codec) to serialize and
               deserialize commands for transmission in a format such as JSON,
               XML, or CBOR, or to generate format-specific message schemas.
               This version includes an embedded target data model, pending
               development of the import mechanism.
namespace:     http://openc2.org/openc2
root:          OpenC2Object
import:        1, target, http://openc2.org/target
*/

OpenC2Object ::= CHOICE {
    command      [1] OpenC2Command,
    response     [2] OpenC2Response,
    alert        [3] OpenC2Alert
}

OpenC2Command ::= RECORD {
    action       Action,
    target       Target,
    actuator     Actuator OPTIONAL,
    modifiers    Modifiers OPTIONAL
}

OpenC2Response ::= RECORD {
    source       device-id,    -- ID of the command issuer, from "command_src" modifier
    command_ref  command-id,    -- Command unique identifier, from "command_id" modifier
    status       status-code,    -- Adapted from HTTP Status Codes, RFC 7231
    statusText   STRING,    -- Status description
    results      STRING     -- Results of executing the command
}

OpenC2Alert ::= RECORD {
    message      STRING
}

Action ::= ENUMERATED {
    scan         (1),    -- Systematic examination of some aspect of the target entity or its environment.
    locate       (2),    -- Find the target object physically, logically, functionally, or by organization.
    query        (3),    -- Initiate a single request for information.
    report       (4),    -- Task an entity to provide information to a designated recipient.
    notify       (5),    -- Set an entity's alerting preferences
    deny         (6),    -- Prevent a certain event or action from completion
    contain      (7),    -- Isolate a file or process or entity so that it cannot modify or access other assets or processes
    allow        (8),    -- Permit access to or execution of a target
    start        (9),    -- Initiate a process, application, system, or activity
    stop         (10),    -- Halt a system or end an activity
    restart      (11),    -- Stop then start a system or activity
    pause        (12),    -- Cease a system or activity while maintaining state
    resume       (13),    -- Start a system or activity from a paused state
    cancel       (14),    -- Invalidate a previous action
    set          (15),    -- Change a value, configuration, or state of a managed entity
    update       (16),    -- Instruct a component to retrieve, install, process, and operate in accordance with a software update, reconfiguration, or other update.
    move         (17),    -- Change the location of a file, subnet, network, or process
    redirect     (18),    -- Change the flow of traffic to a destination other than its original destination
    delete       (19),    -- Remove data and files
    snapshot     (20),    -- Record and store the state of a target at an instant in time
    detonate     (21),    -- Execute and observe the behavior of a target in an isolated environment
    restore      (22),    -- Delete or replace files, settings, or attributes to return the system to an identical or similar known state
    save         (23),    -- Commit data or system state to memory
    throttle     (24),    -- Adjust the throughput of a data flow
    delay        (25),    -- Stop or hold up an activity or data transmittal
    substitute   (26),    -- Replace all or part of the data, content or payload in the least detectable manner
    copy         (27),    -- Duplicate a file or data flow
    sync         (28),    -- Synchronize a sensor or actuator with other system components
    distill      (29),    -- Task a sensor to send a summary or abstraction of the sensing information instead of the raw data feed
    augment      (30),    -- Task a sensor to do a level of preprocessing or sense making prior to sending the sensor data
    investigate  (31),    -- Task the recipient enclave to aggregate and report information as it pertains to an anomaly
    mitigate     (32),    -- Task the recipient enclave to circumvent the problem without necessarily eliminating the vulnerability or attack point
    remediate    (33)     -- Task the recipient enclave to eliminate the vulnerability or attack point
}

Target ::= CHOICE {    -- OpenC2 Target datatypes
    artifact              [1] artifact,    -- SCO v2
    commands              [2] commands,    -- OpenC2 - query actuator for supported capabilities
    device                [3] device,    -- CybOX 2.1
    directory             [4] directory,    -- SCO v2
    disk                  [5] disk,    -- CybOX 2.1
    disk_partition        [6] disk-partition,    -- CybOX 2.1
    domain_name           [7] domain-name,    -- SCO v2
    email_addr            [8] email-addr,    -- SCO v2
    email_message         [9] email-message,    -- SCO v2
    file                  [10] file,    -- SCO v2
    ipv4_addr             [11] ipv4-addr,    -- SCO v2
    ipv6_addr             [12] ipv6-addr,    -- SCO v2
    mac_addr              [13] mac-addr,    -- SCO v2
    memory                [14] memory,    -- CybOX 2.1
    ip_connection         [15] ip-connection,    -- OpenC2
    process               [16] process,    -- SCO v2
    software              [17] software,    -- SCO v2
    url                   [18] url,    -- SCO v2
    user_account          [19] user-account,    -- SCO v2
    user_session          [20] user-session,    -- CybOX 2.1
    volume                [21] volume,    -- CybOX 2.1
    windows_registry_key  [22] windows-registry-key,    -- SCO v2
    x509_certificate      [23] x509-certificate     -- SCO v2
}

Actuator ::= CHOICE {
    endpoint                         [1] ActuatorSpecifiers,
    endpoint_digital_telephone_handset [2] ActuatorSpecifiers,
    endpoint_laptop                  [3] ActuatorSpecifiers,
    endpoint_pos_terminal            [4] ActuatorSpecifiers,
    endpoint_printer                 [5] ActuatorSpecifiers,
    endpoint_sensor                  [6] ActuatorSpecifiers,
    endpoint_server                  [7] ActuatorSpecifiers,
    endpoint_smart_meter             [8] ActuatorSpecifiers,
    endpoint_smart_phone             [9] ActuatorSpecifiers,
    endpoint_tablet                  [10] ActuatorSpecifiers,
    endpoint_workstation             [11] ActuatorSpecifiers,
    network                          [12] ActuatorSpecifiers,
    network_bridge                   [13] ActuatorSpecifiers,
    network_firewall                 [14] ActuatorSpecifiers,
    network_gateway                  [15] ActuatorSpecifiers,
    network_guard                    [16] ActuatorSpecifiers,
    network_hips                     [17] ActuatorSpecifiers,
    network_hub                      [18] ActuatorSpecifiers,
    network_ids                      [19] ActuatorSpecifiers,
    network_ips                      [20] ActuatorSpecifiers,
    network_modem                    [21] ActuatorSpecifiers,
    network_nic                      [22] ActuatorSpecifiers,
    network_proxy                    [23] ActuatorSpecifiers,
    network_router                   [24] ActuatorSpecifiers,
    network_security_manager         [25] ActuatorSpecifiers,
    network_sense_making             [26] ActuatorSpecifiers,
    network_sensor                   [27] ActuatorSpecifiers,
    network_switch                   [28] ActuatorSpecifiers,
    network_vpn                      [29] ActuatorSpecifiers,
    network_wap                      [30] ActuatorSpecifiers,
    process                          [31] ActuatorSpecifiers,
    process_aaa_server               [32] ActuatorSpecifiers,
    process_anti_virus_scanner       [33] ActuatorSpecifiers,
    process_connection_scanner       [34] ActuatorSpecifiers,
    process_directory_server         [35] ActuatorSpecifiers,
    process_dns_server               [36] ActuatorSpecifiers,
    process_email_service            [37] ActuatorSpecifiers,
    process_file_scanner             [38] ActuatorSpecifiers,
    process_location_service         [39] ActuatorSpecifiers,
    process_network_scanner          [40] ActuatorSpecifiers,
    process_remediation_service      [41] ActuatorSpecifiers,
    process_reputation_service       [42] ActuatorSpecifiers,
    process_sandbox                  [43] ActuatorSpecifiers,
    process_virtualization_service   [44] ActuatorSpecifiers,
    process_vulnerability_scanner    [45] ActuatorSpecifiers
}

ActuatorSpecifiers ::= RECORD {
    device_id    url OPTIONAL,
    asset_id     STRING OPTIONAL
}

Modifiers ::= MAP {
    context       [1] STRING OPTIONAL,    -- universal
    start_time    [2] date-time OPTIONAL,    -- universal
    end_time      [3] date-time OPTIONAL,    -- universal
    duration      [4] duration OPTIONAL,    -- pause
    frequency     [5] duration OPTIONAL,    -- report, notify, restart, update, sync
    command_id    [6] command-id OPTIONAL,    -- universal  (was "id")
    command_src   [7] device-id OPTIONAL,    -- add to universal
    response      [8] response-type OPTIONAL,    -- universal
    respond_to    [9] respond-to OPTIONAL,    -- investigate/mitigate/remediate, was report_to
    source        [10] location OPTIONAL,    -- update
    destination   [11] location OPTIONAL,    -- copy, move, save
    options       [12] STRING OPTIONAL,    -- add to universal? (restart, set, substitute, restore)
    method        [13] method-value OPTIONAL,    -- deny, pause, scan, start, stop, augment
    search        [14] search-type OPTIONAL,    -- scan
    where         [15] where OPTIONAL,    -- allow, deny, contain
    message       [16] STRING OPTIONAL,    -- notify
    command_ref   [17] command-id OPTIONAL,    -- cancel
    network_acl   [18] network-acl OPTIONAL,    -- firewall profile
    segmentation  [19] segmentation OPTIONAL     -- firewall profile
}

date-time ::= STRING(PATTERN "^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d{1,6})?(Z|[-+]\d\d:\d\d)$")    -- RFC 3339 date-time

duration ::= STRING(PATTERN "^PT(\d+H(\d+M(\d+S)?)?|\d+M(\d+S)?|\d+S)$")    -- RFC 3339 / ISO 8601 duration (regex is for dur-time option only, need full duration)

command-id ::= STRING    -- Command unique identifier

device-id ::= STRING    -- Device Identifier / Address (url)

respond-to ::= STRING    -- Location to send responses to (url)

location ::= STRING    -- Object/data locations (url)

response-type ::= ENUMERATED {
    ack          (1),
    status       (2)
}

method-value ::= CHOICE {    -- Method must agree with Action (test descriptions)
    deny         [1] DenyMethod,    -- Action must be "deny"
    pause        [2] PauseMethod,    -- Action must be 'pause'
    scan         [3] ScanMethod,    -- Action must be 'scan"
    start        [4] StartMethod,    -- Action must be start
    stop         [5] StopMethod     -- Action must be "stop"
}

DenyMethod ::= ENUMERATED {
    acl          (1),
    blackhole    (2),
    sinkhole     (3),
    blacklist    (4),
    whitelist    (5)
}

PauseMethod ::= ENUMERATED {
    hibernate    (1),
    sleep        (2),
    suspend      (3)
}

ScanMethod ::= ENUMERATED {
    authenticated      (1),
    non-authenticated  (2)
}

StartMethod ::= ENUMERATED {
    spawn        (1)
}

StopMethod ::= ENUMERATED {
    graceful     (1),
    immediate    (2)
}

search-type ::= ENUMERATED {
    cve              (1),
    patch            (2),
    vendor-bulletin  (3),
    signature        (4)
}

where ::= ENUMERATED {
    internal     (1),
    perimeter    (2),
    unspecified  (3)     -- redirect, was "where = null"
}

network-acl ::= RECORD {
}

segmentation ::= RECORD {
}

status-code ::= ENUMERATED {    -- Adapted from HTTP Status Codes, RFC 7231
    Processing             (102),    -- 1xx: Informational
    OK                     (200),    -- 2xx: Success
    Bad_Request            (400),    -- 3xx: Redirection
    Unauthorized           (401),    -- 4xx: Client Error
    Forbidden              (403),
    Internal_Server_Error  (500),    -- 5xx: Server Error
    Not_Implemented        (501)
}

Base64 ::= STRING    -- A sequence of octets encoded as a Base64 string

Hex ::= STRING    -- A sequence of octets encoded as a hexadecimal string

hashes-type ::= MAP {    -- Hash values for algorithms included in hash-algo-ov
    MD5          [1] Hex OPTIONAL,    -- MD5 message digest as defined in RFC3121
    MD6          [2] Hex OPTIONAL,    -- MD6 message digest as defined in MD6 proposal
    RIPEMD-160   [3] Hex OPTIONAL,    -- RACE Integrity Primitives Evaluation Message as defined in RIPEMD-160 specification
    SHA-1        [4] Hex OPTIONAL,    -- Secure Hash Algorithm (SHA)-1 as defined in RFC3174
    SHA-224      [5] Hex OPTIONAL,    -- SHA-224 as defined in RFC6234 (US Secure Hash Algorithms)
    SHA-256      [6] Hex OPTIONAL,    -- SHA-256 as defined in RFC6234
    SHA-384      [7] Hex OPTIONAL,    -- SHA-384 as defined in RFC6234
    SHA-512      [8] Hex OPTIONAL,    -- SHA-512 as defined in RFC6234
    SHA3-224     [9] Hex OPTIONAL,    -- SHA3-224 as defined in FIPS PUP 202
    SHA3-256     [10] Hex OPTIONAL,    -- SHA3-256 as defined in FIPS PUP 202
    SHA3-384     [11] Hex OPTIONAL,    -- SHA3-384 as defined in FIPS PUP 202
    SHA3-512     [12] Hex OPTIONAL,    -- SHA3-512 as defined in FIPS PUP 202
    ssdeep       [13] Hex OPTIONAL,    -- ssdeep fuzzy hashing algorithm as defined in the SSDEEP specification
    WHIRLPOOL    [14] Hex OPTIONAL     -- whirlpool cryptographic hash function as defined in ISO/IEC 10118-3:2004
}

encryption-algo ::= ENUMERATED {    -- Replace with an IANA algorithm registry?  Which one?
    AES128-ECB         (1),    -- Advanced Encryption Standard (AES) with Electronic Codebook (ECB) mode, NIST SP 800-38A
    AES128-CBC         (2),    -- AES with Cipher Block Chaining (CBC) mode, NIST SP 800-38A
    AES128-CFB         (3),    -- AES with Cipher Feedback (CFB) mode, NIST SP 800-38A
    AES128-OFB         (4),    -- AES with Output Feedback (OFB) mode, NIST SP 800-38A
    AES128-CTR         (5),    -- AES with Counter (CTR) mode, NIST SP 800-38A
    AES128-XTS         (6),    -- AES with XEX Tweakable Block Cipher with Ciphertext Stealing (XTS) mode, NIST SP 800-38E
    AES128-GCM         (7),    -- AES with Galois Counter (GCM) mode, NIST SP 800-38D
    Salsa20            (8),    -- Salsa20 stream cipher
    Salsa12            (9),    -- Salsa20/12 stream cipher
    ChaCha20-Poly1305  (10),    -- ChaCha20-Poly1305 stream cipher, RFC 7539
    ChaCha20           (11),    -- ChaCha20 stream cipher without poly1305 authentication, RFC 7539
    DES-CBC            (12),    -- Data Encryption Standard (DES) with CBC mode, NIST FIPS Pub 81
    3DES-CBC           (13),    -- Triple DES (3DES) with CBC mode
    DES-ECB            (14),    -- DES with ECB mode, NIST FIPS Pub 81
    3DES-ECB           (15),    -- 3DES with ECB mode
    CAST128-CBC        (16),    -- CAST-128 algorithm with CBC mode, RFC 2144
    CAST256-CBC        (17),    -- CAST-256 algorithm with CBC mode, RFC 2612
    RSA                (18),    -- RSA asymmetric encryption algorithm, RFC 2313
    DSA                (19)     -- Digital Signature Algorithm, NIST FIPS Pub 186-4 (*not an encryption algorithm)
}

artifact ::= RECORD {
    mime_type    STRING OPTIONAL,    -- MUST be a valid MIME type as specified in the IANA Media Types registry
    *            payload OPTIONAL,    -- choice of literal content or URL to obtain content
    hashes       hashes-type OPTIONAL     -- Specifies a dictionary of hashes for the contents of the payload
}

payload ::= CHOICE {
    payload_bin  [1] Base64,    -- Specifies the binary data contained in the artifact as a base64-encoded string.
    url          [2] STRING     -- MUST be a valid URL that resolves to the un-encoded content
}

autonomous-system ::= RECORD {
    number       INTEGER,    -- Number assigned to the AS, typically by a Regional Internet Registry
    name         STRING OPTIONAL,    -- Name of the AS
    rir          STRING OPTIONAL     -- Regional Internet Registry (RIR) that assigned the number to the AS
}

commands ::= ENUMERATED {    -- Target used to query Actuator for its supported capabilities
    actions          (1),    -- results = JSON array of supported action verbs
    schema           (2),    -- results = JAEN syntax of supported commands
    actuator_groups  (3)     -- results = JSON array of actuator group names
}

device ::= MAP {
    description       [1] STRING OPTIONAL,
    device_type       [2] STRING OPTIONAL,
    manufacturer      [3] STRING OPTIONAL,
    model             [4] STRING OPTIONAL,
    serial_number     [5] STRING OPTIONAL,
    firmware_version  [6] STRING OPTIONAL,
    system_details    [7] STRING OPTIONAL
}

directory ::= MAP {
    path         [1] STRING,    -- Path, as originally observed, to the directory on the filesystem
    path_enc     [2] STRING OPTIONAL,    -- Observed encoding for the path, from the IANA Character Set Registry
    created      [3] date-time OPTIONAL,    -- Date/time the directory was created
    modified     [4] date-time OPTIONAL,    -- Date/time the directory was last written-to/modified
    accessed     [5] date-time OPTIONAL,    -- Date/time the directory was last accessed
    contains     [6] dir-contents OPTIONAL     -- List of files/directories contained within the directory
}

dir-contents ::= ARRAY_OF {
                 [0] dirfile
}

dirfile ::= CHOICE {
    d            [1] directory,
    f            [2] file
}

disk ::= MAP {    -- CybOX 2.1
}

disk-partition ::= MAP {    -- CybOX 2.1
}

domain-name ::= RECORD {
    value        STRING,    -- Value of the domain name
    resolves_to  ip-addrs OPTIONAL     -- List of IP addresses or domain names
}

ip-addrs ::= ARRAY_OF {
                 [0] ip-addr
}

ip-addr ::= CHOICE {
    ipv4         [1] ipv4-addr,
    ipv6         [2] ipv6-addr,
    name         [3] domain-name
}

email-addr ::= RECORD {
    value         STRING,    -- Email address (addr-spec in RFC 5322 Section 3.4)
    display_name  STRING OPTIONAL,    -- Name that is displayed to the user of a mail application
    belongs_to    user-account OPTIONAL     -- User account that the email address belongs to
}

email-message ::= MAP {    -- TODO: finish
}

file ::= MAP {
    extensions            [1] file-extensions OPTIONAL,    -- Content-specific file information
    hashes                [2] hashes-type OPTIONAL,    -- Dictionary of hashes for the file
    size                  [3] INTEGER OPTIONAL,    -- Size of the file, in bytes.
    name                  [4] STRING OPTIONAL,    -- Name of the file.
    name_enc              [5] STRING OPTIONAL,    -- Observed encoding of the file, from IANA Character Set Registry
    magic_number_hex      [6] Hex OPTIONAL,    -- Hexadecimal constant associated with a specific file format.
    mime_type             [7] STRING OPTIONAL,    -- MIMI type name for the file, from the IANA media type registry.
    created               [8] date-time OPTIONAL,    -- Date/time the file was created.
    modified              [9] date-time OPTIONAL,    -- Date/time the file was last written to / modified.
    accessed              [10] date-time OPTIONAL,    -- Date/time the file was last accessed.
    parent-directory      [11] directory OPTIONAL,    -- Parent directory of the file.
    is_encrypted          [12] BOOLEAN OPTIONAL,    -- Specifies whether the file is encrypted.
    encryption_algorithm  [13] encryption-algo OPTIONAL,    -- Specifies the algorithm used to encrypt the file.
    decryption_key        [14] STRING OPTIONAL,    -- Decryption key used to decrypt the file.
    contains              [15] file-contents OPTIONAL,    -- List of observables contained within the file
    content               [16] artifact OPTIONAL     -- Content of the file.
}

file-contents ::= ARRAY_OF {
                 [0] Target
}

file-extensions ::= MAP {
    ntfs_ext              [1] ntfs-ext OPTIONAL,
    raster_image_ext      [2] raster-image-ext OPTIONAL,
    pdf_ext               [3] pdf-ext OPTIONAL,
    archive_ext           [4] archive-ext OPTIONAL,
    windows_pebinary_ext  [5] windows-pebinary-ext OPTIONAL
}

ntfs-ext ::= MAP {    -- TODO
}

raster-image-ext ::= MAP {    -- TODO
}

pdf-ext ::= MAP {    -- TODO
}

archive-ext ::= MAP {    -- TODO
}

windows-pebinary-ext ::= MAP {    -- TODO
}

ipv4-addr ::= RECORD {
    value             STRING,    -- IPv4 address or range in CIDR notation
    resolves_to_refs  mac-addrs OPTIONAL,    -- Specifies a list of references to one or more Layer 2 Media Access Control (MAC) addresses that the IPv4 address resolves to.
    belongs_to_refs   asystems OPTIONAL     -- Specifies a reference to one or more autonomous systems (AS) that the IPv4 address belongs to.
}

ipv6-addr ::= RECORD {
    value             STRING,    -- IPv6 address or range
    resolves_to_refs  mac-addrs OPTIONAL,    -- Specifies a list of references to one or more Layer 2 Media Access Control (MAC) addresses that the IPv4 address resolves to.
    belongs_to_refs   asystems OPTIONAL     -- Specifies a reference to one or more autonomous systems (AS) that the IPv4 address belongs to.
}

mac-addrs ::= ARRAY_OF {
                 [0] mac-addr
}

mac-addr ::= STRING    -- Colon-delimited MAC-48 address with leading zeros for each octet

asystems ::= ARRAY_OF {
                 [0] autonomous-system
}

ip-connection ::= RECORD {    -- 5-tuple that specifies a tcp/ip connection
    src_addr         ip-addr OPTIONAL,    -- source address
    src_port         port OPTIONAL,    -- source TCP/UDP port number
    dst_addr         ip-addr OPTIONAL,    -- destination address
    dst_port         port OPTIONAL,    -- destination TCP/UDP port number
    layer4_protocol  layer4-protocol OPTIONAL     -- Protocol (IPv4) / Next Header (IPv6)
}

port ::= CHOICE {    -- TCP/UDP port number or protocol
    number       [1] INTEGER,    -- Port number (e.g., dynamically assigned)
    protocol     [2] layer7-protocol     -- Registered port nummber (registered with IANA)
}

layer3-protocol ::= ENUMERATED {    -- IEEE 802 Ether Types - any IANA value, RFC 7042
    IPv4         (2048),    -- 0x0800 Internet Protocol Version 4
    ARP          (2054),    -- 0x0806 Address Resolution Protocol
    IPv6         (34525),    -- 0x86DD Internet Protocol Version 6
    MPLS         (34887)     -- 0x8847 Multi-Protocol Label Switching
}

layer4-protocol ::= ENUMERATED {    -- protocol (IPv4) or next header (IPv6) field - any IANA value, RFC 5237
    ICMP         (1),    -- Internet Control Message Protocol - RFC 792
    TCP          (6),    -- Transmission Control Protocol - RFC 793
    UDP          (17)     -- User Datagram Protocol - RFC 768
}

layer7-protocol ::= ENUMERATED {    -- Service Name and Transport Protocol Port - any IANA value, RFC 6335
    ftp-data     (20),    -- File Transfer Protocol (data)
    ftp          (21),    -- File Transfer Protocol (control)
    ssh          (22),    -- Secure Shell Protocol
    telnet       (23),    -- Telnet
    smtp         (25),    -- Simple Mail Transfer Protocol
    http         (80),    -- Hypertext Transport Protocol
    https        (443)     -- HTTP over TLS
}

memory ::= MAP {    -- CybOX 2.1
}

process ::= MAP {
    extensions             [1] process-ext OPTIONAL,    -- Process-type specific info
    is_hidden              [2] BOOLEAN OPTIONAL,    -- Whether the process is hidden
    pid                    [3] INTEGER OPTIONAL,    -- Process ID of the process
    name                   [4] STRING OPTIONAL,    -- Name of the process
    created                [5] date-time OPTIONAL,    -- Date/time at which the process was created
    cwd                    [6] STRING OPTIONAL,    -- Current working directory of the process
    arguments              [7] arguments OPTIONAL,    -- List of arguments used in executing the process
    environment_variables  [8] envars OPTIONAL,    -- List of environment variables associated with the process
    opened_connections     [9] opened-connections OPTIONAL,    -- List of network connections opened by the process
    creator_user           [10] user-account OPTIONAL,    -- User that created the process
    binary                 [11] file OPTIONAL,    -- Executable binary that was executed as the process
    parent                 [12] process OPTIONAL,    -- Process that spawned this one
    children               [13] process-children OPTIONAL     -- Processes that were spawned by this one
}

process-ext ::= MAP {
    windows_process_ext  [1] windows-process-ext OPTIONAL,
    windows_service_ext  [2] windows-service-ext OPTIONAL
}

process-children ::= ARRAY_OF {
                 [0] process
}

windows-process-ext ::= MAP {    -- TODO
}

windows-service-ext ::= MAP {    -- TODO
}

software ::= RECORD {
    name         STRING,    -- Name of the software
    cpe          STRING OPTIONAL,    -- From Common Platform Enumeration (CPE) v2.3 dictionary
    language     STRING OPTIONAL,    -- Language of the software from ISO 639-2
    vendor       STRING OPTIONAL,    -- Vendor of the software
    version      STRING OPTIONAL     -- Version of the software
}

url ::= STRING    -- Uniform Resource Locator

user-account ::= MAP {
    user_id                [1] STRING,    -- Identifier of the account.  Format depends on the system the account is maintained in.
    account_login          [2] STRING OPTIONAL,    -- Account login string, in cases where user_id is other than what the user types to log in.
    account_type           [3] account-type OPTIONAL,    -- Value from the account-type vocabulary
    display_name           [4] STRING OPTIONAL,    -- Display name of the account (e.g., Unix GECOS field)
    is_service_account     [5] BOOLEAN OPTIONAL,    -- Account is associated with a network service or system process, not an individual.
    is_privileged          [6] BOOLEAN OPTIONAL,    -- Account has elevated privileges
    can_escalate_privs     [7] BOOLEAN OPTIONAL,    -- Account has the ability to escalate privileges
    is_disabled            [8] BOOLEAN OPTIONAL,    -- Account is disabled
    account_created        [9] date-time OPTIONAL,    -- Creation date of the account
    account_expires        [10] date-time OPTIONAL,    -- Expiration date of the account
    password_last_changed  [11] date-time OPTIONAL,    -- When the account password was last changed
    account_first_login    [12] date-time OPTIONAL,    -- When the account was first accessed
    account_last_login     [13] date-time OPTIONAL     -- When the account was last accessed
}

account-type ::= ENUMERATED {
    unix            (1),    -- POSIX account
    windows-local   (2),    -- Windows local account
    windows-domain  (3),    -- Windows domain account
    ldap            (4),    -- Lightweight Directory Access Protocol (LDAP) account
    tacacs          (5),    -- Terminal Access Controller Access Control System (TACACS) account
    radius          (6),    -- Remote Authentication Dial-in User Service (RADIUS - RFC 2865) account
    nis             (7),    -- Network Information System (NIS) account
    openid          (8),    -- OpenID account
    facebook        (9),    -- Facebook account
    skype           (10),    -- Skype account
    twitter         (11)     -- Twitter account
}

user-session ::= MAP {    -- CybOX 2.1
}

volume ::= MAP {    -- CybOX 2.1
}

windows-registry-key ::= RECORD {
    key                STRING,    -- Full registry key including the hive.
    values             windows-registry-values OPTIONAL,    -- Values found under the registry key.
    modified           date-time OPTIONAL,    -- Last date-time the registry key was modified.
    creator_user       user-account OPTIONAL,    -- User account that created the registry key
    number_of_subkeys  INTEGER OPTIONAL     -- Number of subkeys contained under the registry key
}

windows-registry-values ::= ARRAY_OF {
                 [0] windows-registry-value
}

windows-registry-value ::= RECORD {
    name         STRING,    -- Name of the registry value.  Empty string specifies the default value.
    data         STRING OPTIONAL,    -- Data contained in the registry key.
    data_type    windows-registry-datatype-enum OPTIONAL     -- Registry data type used in the registry value.
}

windows-registry-datatype-enum ::= ENUMERATED {
    REG_NONE                        (0),    -- No defined value type.
    REG_SZ                          (1),    -- A null-terminated string.
    REG_EXPAND_SZ                   (2),    -- A null-terminated string with unexpanded references to environment variables.
    REG_BINARY                      (3),    -- Binary data in any form.
    REG_DWORD                       (4),    -- A 32 bit number.
    REG_DWORD_BIG_ENDIAN            (5),    -- A 32 bit number in big-endian format.
    REG_LINK                        (6),    -- A null-terminated string that contains the target path of a symbolic link.
    REG_MULTI_SZ                    (7),    -- A sequence of null-terminated strings, terminated by an empty string (\0).
    REG_RESOURCE_LIST               (8),    -- A series of nested lists designed to store a resource list used by a hardware device driver.
    REG_FULL_RESOURCE_DESCRIPTION   (9),    -- A series of nested lists designed to store a resource list used by a physical hardware device.
    REG_RESOURCE_REQUIREMENTS_LIST  (10),    -- Device driver list of hardware resource requirements in Resource Map tree.
    REG_QWORD                       (11),    -- A 64 bit number.
    REG_INVALID_TYPE                (12)     -- An invalid key.
}

x509-certificate ::= MAP {    -- TODO: finish
    is_self_signed  [1] BOOLEAN OPTIONAL,    -- Specifies whether the certificate is self-signed
    hashes          [2] hashes-type     -- Specifies any hashes calculated for the entire contents of the certificate
}
